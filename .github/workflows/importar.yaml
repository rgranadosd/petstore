name: Importar

on:
  push:
    branches: [ main ]
    paths: 
      - 'apis/**'
      - 'petstore.yaml'

jobs:
  create:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout del código
    - uses: actions/checkout@v3

    # 2. Instalar apictl
    - name: Instalar apictl
      run: |
        FILE="apictl-4.3.3-linux-amd64.tar.gz"
        curl -Lf -o "$FILE" \
          https://github.com/wso2/product-apim-tooling/releases/download/v4.3.3/"$FILE"
        tar -xzf "$FILE"
        sudo install -m 755 apictl/apictl /usr/local/bin/apictl
        apictl version

    # 3. Validar que los endpoints no están vacíos ni mal formateados
    - name: Validar secretos
      env:
        APIM_ENDPOINT:       ${{ secrets.APIM_ENDPOINT }}
        APIM_TOKEN_ENDPOINT: ${{ secrets.APIM_TOKEN_ENDPOINT }}
      run: |
        if [[ -z "$APIM_ENDPOINT" || -z "$APIM_TOKEN_ENDPOINT" ]]; then
          echo "::error::Faltan APIM_ENDPOINT o APIM_TOKEN_ENDPOINT"
          exit 1
        fi
        if [[ "$APIM_TOKEN_ENDPOINT" == *$'\n'* ]]; then
          echo "::error::APIM_TOKEN_ENDPOINT contiene saltos de línea"
          exit 1
        fi
        echo "::notice::Validación de secretos superada"

    # 4. Añadir entorno y hacer login
    - name: Login APIM
      env:
        APIM_ENDPOINT:       ${{ secrets.APIM_ENDPOINT }}
        APIM_TOKEN_ENDPOINT: ${{ secrets.APIM_TOKEN_ENDPOINT }}
        APIM_USER:           ${{ secrets.APIM_USER }}
        APIM_PASS:           ${{ secrets.APIM_PASS }}
      run: |
        apictl add env dev-env \
          --apim  "$APIM_ENDPOINT" \
          --token "$APIM_TOKEN_ENDPOINT" \
          --insecure
        echo "$APIM_PASS" | apictl login dev-env -u "$APIM_USER" --password-stdin -k

    # 5. Importar las APIs en estado CREATED sin desplegar revisiones
    - name: Importar working copy (CREATED)
      run: |
        shopt -s globstar nullglob
        for oas in apis/**/api.yaml apis/**/petstore.yaml; do
          base_dir=$(dirname "$oas")
          api_name=$(basename "$(dirname "$base_dir")")
          api_version=$(basename "$base_dir")
          proj="/tmp/${api_name}_${api_version}"
          rm -rf "$proj"

          apictl init "$proj" --oas "$oas" --initial-state=CREATED
          apictl import api -f "$proj" -e dev-env \
            --update --skip-deployments -k
        done
